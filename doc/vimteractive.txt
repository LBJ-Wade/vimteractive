*vimteractive.txt*   Sending commands from vim to interactive programs

                    Vimteractive - main help file


==============================================================================
CONTENTS                                                  *syntastic-contents*

    1.Intro........................................|vimteractive-intro|
    2.Usage........................................|vimteractive-example-usage|
    3.Extending functionality......................|vimteractive-extending|
    4.About........................................|vimteractive-about|
    5.License......................................|vimteractive-license|

==============================================================================
1. Intro                                                  *vimteractive-intro*

Vimteractive was inspired by the workflow of the vim-ipython plugin:

    https://github.com/ivanov/vim-ipython

This plugin is designed to extend a subset of the functionality of vimteractive
to other interpreters (including ipython). 

At the moment, vimteractive supports the following interpreters:

- python
- ipython
- maple
- bash

==============================================================================
2. Example Usage                                  *vimteractive-example-usage*

Create a python file vimteractive_test.py with the following content:

    import matplotlib.pyplot as plt
    import numpy

    fig, ax = plt.subplots()
    x = numpy.linspace(-2,2,1000)
    y = x**3-x
    ax.plot(x, y)
    ax.set_xlabel('$x$')
    ax.set_ylabel('$y$')

Now start an ipython interpreter in vim with :Iipython. You should see a
terminal window open in a split window. Position your cursor
over the first line, and press control-s <C-s>. You should see this line now
appear in the first prompt of the preview window. Do the same with the second
and fourth lines. At the fourth line, you should see a figure appear once it's
constructed with plt.subplots(`. Continue by sending lines to the
interpreter. You can send multiple lines by doing a visual selection and
pressing <C-s>.

In general, interpreters are started with :I<interpreter name> for example
:Imaple or :Ibash, and you can send line(s) of code from a text file to an
interpreter in the preview window with <C-s>.


==============================================================================
3. Extending functionality                            *vimteractive-extending*

In many cases, you simply need to add an extra I<interpreter name> command to
plugin/vimteractive.vim


==============================================================================
4. About                                          *vimteractive-functionality*

The core maintainer of vimteractive is:
    Will Handley (GitHub: williamjameshandley)

Find the latest version of vimteractive at:

    http://github.com/williamjameshandley/vimteractive

==============================================================================
5. License                                              *vimteractive-license*

Vimteractive is licensed under GPL 3.0
